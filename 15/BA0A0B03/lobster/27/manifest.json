{"cyber-dojo.sh":"\n# - - - - - - - - - - - - - - - - - - - - - - - - -\necho\nmake unit\nif [ $? -ne 0 ]; then\n    echo \"FAILED to build unit tests\"\n    exit 1\nfi\n./unit\nif [ $? -ne 0 ]; then\n    exit 1\nfi\n\n# - - - - - - - - - - - - - - - - - - - - - - - - -\necho\nmake contract\nif [ $? -ne 0 ]; then\n    echo \"FAILED to build contract tests\"\n    exit 1\nfi\n./contract\nif [ $? -ne 0 ]; then\n    exit 1\nfi\n\n# - - - - - - - - - - - - - - - - - - - - - - - - -\necho\nmake shouty_report_job\nif [ $? -ne 0 ]; then\n    exit 1\nfi\n\n# - - - - - - - - - - - - - - - - - - - - - - - - -\necho\nmake e2e\nif [ $? -ne 0 ]; then\n    exit 1\nfi\n./e2e\nif [ $? -ne 0 ]; then\n    exit 1\nfi\n\n# - - - - - - - - - - - - - - - - - - - - - - - - -\n# green light pattern\necho\necho \"All tests passed\"\n","eco_stat.cpp":"#include \"eco_stat.hpp\"\n#include <ostream>\n\neco_stat::eco_stat(const std::string & sales_person_name_,\n         double revenue_per_mile_)\n   : sales_person_name(sales_person_name_)\n   , revenue_per_mile(revenue_per_mile_)\n{\n\n}\n\nbool operator==(const eco_stat & lhs, const eco_stat & rhs)\n{\n    return ((lhs.sales_person_name == rhs.sales_person_name)\n            && (lhs.revenue_per_mile == rhs.revenue_per_mile));\n}\n\nbool operator!=(const eco_stat & lhs, const eco_stat & rhs)\n{\n    return !(lhs == rhs);\n}\n\nstd::ostream & operator<<(std::ostream & os, const eco_stat & es)\n{\n    os << \"eco_stat[sales_person_name = \\\"\"\n       << es.sales_person_name\n       << \"\\\", revenue_per_mile = \\\"\"\n       << es.revenue_per_mile\n       << \"\\\"]\"\n       << std::endl;\n    return os;\n}\n","eco_stat.hpp":"#ifndef ECO_STAT_INCLUDED\n#define ECO_STAT_INCLUDED\n\n#include <iosfwd>\n#include <string>\n\nstruct eco_stat\n{\n    eco_stat(const std::string & sales_person_name_,\n             double revenue_per_mile_);\n\n    std::string sales_person_name;\n    double revenue_per_mile;\n}; \n\nbool operator==(const eco_stat & lhs, const eco_stat & rhs);\nbool operator!=(const eco_stat & lhs, const eco_stat & rhs);\n\nstd::ostream & operator<<(std::ostream & os, const eco_stat & es);\n\n#endif\n","eco_stat_collection_builder.cpp":"#include \"eco_stat_collection_builder.hpp\"\n\nconst std::vector<eco_stat> eco_stat_collection_builder::default_eco_stat_collection= {\n   eco_stat(\"David Allen\", 1.234f),\n   eco_stat(\"Lisa Crispin\", 0.025f),\n   eco_stat(\"Ian Dees\", 98.76f)\n};\n\nstd::vector<eco_stat> eco_stat_collection_builder::build() const\n{\n    if (eco_stat_data.size() == 0)\n    {\n        return default_eco_stat_collection;\n    }\n    else\n    {\n        std::vector<eco_stat> eco_stat_collection;\n\n        for (auto & entry : eco_stat_data)\n        {\n            eco_stat_collection.push_back(\n                eco_stat(entry.first, entry.second)\n            );\n        }\n\n        return eco_stat_collection;\n    }\n}\n\neco_stat_collection_builder &\neco_stat_collection_builder::with_sales_person_rpm(\n    const std::string & name,\n    double rpm\n)\n{\n    eco_stat_data[name] = rpm;\n\n    return *this;\n}\n","eco_stat_collection_builder.hpp":"#ifndef ECO_STAT_COLLECTION_BUILDER_INCLUDED\n#define ECO_STAT_COLLECTION_BUILDER_INCLUDED\n\n#include \"eco_stat.hpp\"\n#include <string>\n#include <map>\n#include <vector>\n\nclass eco_stat_collection_builder\n{\npublic:\n    std::vector<eco_stat> build() const;\n\n    eco_stat_collection_builder & with_sales_person_rpm(\n      const std::string & name,\n      double rpm\n    );\n\nprivate:\n    static const std::vector<eco_stat> default_eco_stat_collection;\n\n    std::map<std::string, double> eco_stat_data;\n};\n\n#endif\n","end_to_end.tests.cpp":"#include <algorithm>\n#include <cassert>\n#include <cstdlib>\n#include <fstream>\n#include <sstream>\n#include <iostream>\n#include <iterator>\n#include <vector>\n#include <map>\n\n#include <tinyxml2.hpp>\n\nusing std::back_inserter;\nusing std::cerr;\nusing std::copy;\nusing std::cout;\nusing std::endl;\nusing std::getline;\nusing std::ifstream;\nusing std::istream;\nusing std::istream_iterator;\nusing std::map;\nusing std::string;\nusing std::system;\nusing std::vector;\nusing tinyxml2::XMLDocument;\nusing tinyxml2::XMLNode;\nusing tinyxml2::XMLElement;\nusing tinyxml2::XMLAttribute;\n\nnamespace {\n\nstring test_data_path = \"\";\n\nint run(const string & input_filename, string environment_variables = string())\n{\n    // environment_variables += std::string(\n    //    \" FAKE_INITIALISATION_DATA='19,123456.78;22,123456.78;57,123456.78'\"\n    //);\n\n    string command = environment_variables + \" ./shouty_report_job \"\n        + test_data_path + input_filename;\n    return system(command.c_str());\n}\n\nstring read_file(const string & path)\n{\n    std::ifstream file(path);\n    std::string str;\n    std::string file_contents;\n    while (std::getline(file, str))\n    {\n        file_contents += str;\n        file_contents.push_back('\\n');\n    }\n\n    return file_contents;\n}\n\nvector<map<string, string>> document_to_list_of_maps(XMLDocument const & document)\n{\n    vector<map<string, string>> result;\n\n    const XMLElement * root = document.FirstChildElement();\n    const XMLElement * child = root->FirstChildElement();\n\n    while (child != NULL)\n    {\n        map<string, string> attributes;\n        const XMLAttribute * attr = child->FirstAttribute();\n        while (attr != NULL)\n        {\n            attributes[attr->Name()] = attr->Value();\n            attr = attr->Next();\n        }\n\n        result.push_back(attributes);\n\n        child = child->NextSiblingElement();\n    }\n\n    return result;\n}\n\nbool are_equal(\n    vector<map<string, string>> const & actual,\n    vector<map<string, string>> const & expected\n)\n{\n    if (actual.size() != expected.size())\n    {\n        return false;\n    }\n\n    vector<map<string, string>>::const_iterator it;\n    for (it = actual.begin(); it != actual.end(); ++it)\n    {\n        if (std::find(expected.begin(), expected.end(), *it) == expected.end())\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid assert_xml_equal(\n    const char * test_name,\n    const string & expected_path,\n    const string & actual_path\n)\n{\n    auto actual_txt = read_file(actual_path);\n    XMLDocument actual_doc;\n    actual_doc.Parse(actual_txt.c_str());\n    vector<map<string, string>> actual\n        = document_to_list_of_maps(actual_doc);\n\n\n    auto expected_txt = read_file(test_data_path + expected_path);\n    XMLDocument expected_doc;\n    expected_doc.Parse(expected_txt.c_str());\n    vector<map<string, string>> expected\n        = document_to_list_of_maps(expected_doc);\n\n    if (!are_equal(actual, expected))\n    {\n        cerr << test_name << std::endl\n            << \"Expected XML to contain:\" << std::endl\n            << expected_txt << std::endl\n            << \"but actually got:\" << std::endl\n            << actual_txt << std::endl;\n\n        assert(false);\n    }\n}\n\nvoid single_sales_person()\n{\n    assert(run(\"test_case_1_input.csv\") == 0);\n    assert(system(\"test -e ./report.xml\") == 0);\n    const char * expected_filename = \"test_case_1_expected.xml\";\n    const char * actual_filename = \"report.xml\";\n    assert_xml_equal(__FUNCTION__, expected_filename, actual_filename);\n}\n\nvoid multiple_sales_people()\n{\n    assert(run(\"test_case_2_input.csv\") == 0);\n    assert(system(\"test -e ./report.xml\") == 0);\n    const char * expected_filename = \"test_case_2_expected.xml\";\n    const char * actual_filename = \"report.xml\";\n    assert_xml_equal(__FUNCTION__, expected_filename, actual_filename);\n}\n\nvoid zero_mileage_claim()\n{\n    assert(run(\"test_case_3_input.csv\") == 0);\n    assert(system(\"test -e ./report.xml\") == 0);\n    const char * expected_filename = \"test_case_3_expected.xml\";\n    const char * actual_filename = \"report.xml\";\n    assert_xml_equal(__FUNCTION__, expected_filename, actual_filename);\n}\n\n} // namespace\n\nint main()\n{\n    single_sales_person();\n    multiple_sales_people();\n    zero_mileage_claim();\n\n    cout << \"tests (end2end) passed\" << endl;\n}\n","fake_stats_service_builder.cpp":"#include \"fake_stats_service_builder.hpp\"\n\n#include <sstream>\n\nfake_stats_service fake_stats_service_builder::build() const\n{\n    if (builder_data.size() == 0)\n    {\n        return fake_stats_service(default_customer_data);\n    }\n    else\n    {\n        std::ostringstream data;\n        std::string separator = \"\";\n\n        for (auto & entry : builder_data)\n        {\n            data << separator << entry.first << \",\" << entry.second;\n            separator = \";\";\n        }\n\n        return fake_stats_service(data.str());\n    }\n}\n\nfake_stats_service_builder &\nfake_stats_service_builder::with_customer_revenue(\n    int id,\n    const std::string&  revenue\n)\n{\n    builder_data[id] = revenue;\n\n    return *this;\n}\n","fake_stats_service_builder.hpp":"#ifndef FAKE_STATS_SERVICE_BUILDER_INCLUDED\n#define FAKE_STATS_SERVICE_BUILDER_INCLUDED\n\n#include \"fake_stats_service.hpp\"\n#include <string>\n\nclass fake_stats_service_builder\n{\npublic:\n    fake_stats_service build() const;\n\n    fake_stats_service_builder & with_customer_revenue(\n        int id,\n        const std::string&  revenue\n    );\n\nprivate:\n    std::string default_customer_data = \"19,123456.78;22,123456.78;57,123456.78\";\n    std::map<int, std::string> builder_data;\n};\n\n#endif\n","fake_stats_service.cpp":"#include \"fake_stats_service.hpp\"\n#include \"shouty_stats_service_exception.hpp\"\n#include <sstream>\n#include <vector>\n\nusing std::string;\nusing std::stod;\nusing std::stoi;\nusing std::stringstream;\nusing std::to_string;\nusing std::vector;\n\nnamespace {\n    \nvector<string> split(const string & s, char delimiter)\n{\n    vector<string> tuples;\n    stringstream ss(s);\n    string token;\n    while (getline(ss, token, delimiter))\n    {\n        tuples.push_back(token);\n    }\n    return tuples;\n}\n\nstring quoted(const string & s)\n{\n    return \"'\" + s + \"'\";\n}\n    \n} // namespace\n\nfake_stats_service::fake_stats_service(const std::string & data)\n{\n    const vector<string> tuples = split(data, ';');\n    for (auto & tuple : tuples)\n    {\n        const vector<string> pair = split(tuple, ',');\n        const int customer_id = stoi(pair[0]);\n        const double revenue = stod(pair[1]);\n        revenue_data[customer_id] = revenue;\n    }\n}\n\ndouble fake_stats_service::get_revenue(int customer_id) const\n{\n    auto it = revenue_data.find(customer_id);\n    if (it != revenue_data.end())\n    {\n    \treturn it->second;\n    }\n    else\n    {\n        const string message(\"No customer found with ID \"\n    \t\t+ quoted(to_string(customer_id)));\n    \tthrow shouty_stats_service_exception(message);\n    }\n}\n","fake_stats_service.hpp":"#ifndef FAKE_STATS_SERVICE_INCLUDED\n#define FAKE_STATS_SERVICE_INCLUDED\n\n#include \"stats_service.hpp\"\n#include <map>\n#include <string>\n\nclass fake_stats_service : public stats_service\n{\npublic:\n    explicit fake_stats_service(const std::string & initialisation_data);\n    virtual double get_revenue(int customer_id) const;\n\nprivate:\n    std::map<int, double> revenue_data;\n}; \n\n#endif\n","makefile":"CXXFLAGS += -I. -std=c++14 -Wall -Wextra -Werror\n\nSRC_PATH = .\nSERVICE_PATH = .\nTEST_PATH = .\n\n# This assumes that the tinyxml2 source code is in the cyber-dojo image\nTINYXML2_SRC_PATH = /usr/local/src\nTINYXML2_INC_PATH = /usr/local/include\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nTINYXML2_DEPENDENTS = \\\n\t${TINYXML2_SRC_PATH}/tinyxml2.cpp \\\n\t${TINYXML2_INC_PATH}/tinyxml2.hpp\n\ntinyxml2.o: $(TINYXML2_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nMILEAGE_CLAIM_DEPENDENTS =\\\n\t${SRC_PATH}/mileage_claim.cpp \\\n\t${SRC_PATH}/mileage_claim.hpp\n\nmileage_claim.o: $(MILEAGE_CLAIM_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nMILEAGE_CLAIM_COLLECTION_BUILDER_DEPENDENTS =\\\n\t${TEST_PATH}/mileage_claim_collection_builder.cpp \\\n\t${TEST_PATH}/mileage_claim_collection_builder.hpp \\\n\t${SRC_PATH}/mileage_claim.hpp\n\nmileage_claim_collection_builder.o: $(MILEAGE_CLAIM_COLLECTION_BUILDER_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nECO_STAT_DEPENDENTS = \\\n\t${SRC_PATH}/eco_stat.cpp \\\n\t${SRC_PATH}/eco_stat.hpp\n\neco_stat.o: $(ECO_STAT_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nECO_STAT_COLLECTION_BUILDER_DEPENDENTS = \\\n\t${TEST_PATH}/eco_stat_collection_builder.cpp \\\n\t${TEST_PATH}/eco_stat_collection_builder.hpp \\\n\t${SRC_PATH}/eco_stat.hpp\n\neco_stat_collection_builder.o: $(ECO_STAT_COLLECTION_BUILDER_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nSHOUTY_STATS_SERVICE_EXCEPTION_DEPENDENTS = \\\n\t${SERVICE_PATH}/shouty_stats_service_exception.cpp \\\n\t${SERVICE_PATH}/shouty_stats_service_exception.hpp\n\nshouty_stats_service_exception.o: $(SHOUTY_STATS_SERVICE_EXCEPTION_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nFAKE_STATS_SERVICE_DEPENDENTS = \\\n\t${TEST_PATH}/fake_stats_service.cpp \\\n\t${TEST_PATH}/fake_stats_service.hpp \\\n\t${SRC_PATH}/stats_service.hpp \\\n\t${SERVICE_PATH}/shouty_stats_service_exception.hpp\n\nfake_stats_service.o: $(FAKE_STATS_SERVICE_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nFAKE_STATS_SERVICE_BUILDER_DEPENDENTS = \\\n\t${TEST_PATH}/fake_stats_service_builder.cpp \\\n\t${TEST_PATH}/fake_stats_service_builder.hpp\n\nfake_stats_service_builder.o: $(FAKE_STATS_SERVICE_BUILDER_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nPRODUCTION_STATS_SERVICE_DEPENDENTS = \\\n\t${SRC_PATH}/production_stats_service.cpp \\\n\t${SRC_PATH}/production_stats_service.hpp \\\n\t${SRC_PATH}/stats_service.hpp \\\n\t${SERVICE_PATH}/shouty_stats_service.hpp\n\nproduction_stats_service.o: $(PRODUCTION_STATS_SERVICE_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nSHOUTY_REPORT_PROCESSOR_DEPENDENTS = \\\n\t${SRC_PATH}/shouty_report_processor.cpp \\\n\t${SRC_PATH}/shouty_report_processor.hpp \\\n\t${SRC_PATH}/eco_stat.hpp \\\n\t${SRC_PATH}/mileage_claim.hpp \\\n\t${SRC_PATH}/stats_service.hpp\n\nshouty_report_processor.o: $(SHOUTY_REPORT_PROCESSOR_DEPENDENTS)\n\tg++ ${CXXFLAGS} -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nSHOUTY_STATS_SERVICE_DEPENDENTS = \\\n\t${SERVICE_PATH}/zzz_DONT_READ_ME.cpp \\\n\t${SERVICE_PATH}/shouty_stats_service.hpp \\\n\t${SERVICE_PATH}/shouty_stats_service_exception.hpp\n\nshouty_stats_service.o: $(SHOUTY_STATS_SERVICE_DEPENDENTS)\n\tg++ ${CXXFLAGS} -o $@ -c $<\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nUNIT_TEST_DEPENDENTS = \\\n\t${TEST_PATH}/unit.tests.cpp \\\n\teco_stat.o \\\n\teco_stat_collection_builder.o \\\n\tfake_stats_service_builder.o \\\n\tfake_stats_service.o \\\n\tmileage_claim.o \\\n\tmileage_claim_collection_builder.o \\\n\tproduction_stats_service.o \\\n\tshouty_report_processor.o \\\n\tshouty_stats_service_exception.o \\\n\tshouty_stats_service.o \\\n\ttinyxml2.o\n\nunit: $(UNIT_TEST_DEPENDENTS)\n\tg++ ${CXXFLAGS} -o $@ $^\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nCONTRACT_TEST_DEPENDENTS = \\\n\t${TEST_PATH}/stats_service.contract.tests.cpp \\\n\tfake_stats_service_builder.o \\\n\tfake_stats_service.o \\\n\tmileage_claim.o \\\n\tproduction_stats_service.o \\\n\tshouty_stats_service.o \\\n\tshouty_stats_service_exception.o \\\n\ttinyxml2.o\n\ncontract: $(CONTRACT_TEST_DEPENDENTS)\n\tg++ ${CXXFLAGS} -o $@ $^\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nSHOUTY_REPORT_JOB_DEPENDENTS = \\\n\t${SRC_PATH}/shouty_report_job.cpp \\\n\teco_stat.o \\\n\teco_stat_collection_builder.o \\\n\tfake_stats_service.o \\\n\tmileage_claim.o \\\n\tproduction_stats_service.o \\\n\tshouty_report_processor.o \\\n\tshouty_stats_service.o \\\n\tshouty_stats_service_exception.o \\\n\ttinyxml2.o\n\nshouty_report_job: $(SHOUTY_REPORT_JOB_DEPENDENTS)\n\tg++ ${CXXFLAGS} -o $@ $^\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nEND_TO_END_TEST_DEPENDENTS = \\\n\t${TEST_PATH}/end_to_end.tests.cpp \\\n\ttinyxml2.o\n\ne2e: $(END_TO_END_TEST_DEPENDENTS)\n\tg++ ${CXXFLAGS} -o $@ $^\n\n#- - - - - - - - - - - - - - - - - - - - - -\n\nclean:\n\trm *.o","mileage_claim.cpp":"#include \"mileage_claim.hpp\"\n\nmileage_claim::mileage_claim(\n    const std::string & name, \n    int miles, \n    int customer_id\n)\n    : name_(name)\n    , miles_(miles)\n    , customer_id_(customer_id)\n{\n}\n\nstd::string mileage_claim::name() const\n{\n    return name_;\n}\n\nint mileage_claim::miles() const\n{\n    return miles_;\n}\n\nint mileage_claim::customer_id() const\n{\n    return customer_id_;\n}\n","mileage_claim.hpp":"#ifndef MILEAGE_CLAIM_INCLUDED\n#define MILEAGE_CLAIM_INCLUDED\n\n#include <string>\n\nclass mileage_claim\n{\npublic:\n    mileage_claim(const std::string & name, int miles, int customer_id);\n    std::string name() const;\n    int miles() const;\n    int customer_id() const;\nprivate:\n    std::string name_;\n    int miles_;\n    int customer_id_;\n};\n\n#endif\n","mileage_claim_collection_builder.cpp":"#include \"mileage_claim_collection_builder.hpp\"\n\nconst std::vector<mileage_claim>\nmileage_claim_collection_builder::default_mileage_claim_collection = {\n      mileage_claim(\"David Allen\", 130000, 57),\n      mileage_claim(\"Lisa Crispin\", 27000, 19),\n      mileage_claim(\"Ian Dees\", 19238855, 22)\n};\n\nstd::vector<mileage_claim> mileage_claim_collection_builder::build() const\n{\n    if (mileage_claim_collection.size() == 0)\n    {\n        return default_mileage_claim_collection;\n    }\n    else\n    {\n        return mileage_claim_collection;\n    }\n}\n\nmileage_claim_collection_builder &\nmileage_claim_collection_builder::with_sales_person_miles_for_customer(\n    const std::string & name,\n    const int miles,\n    const int id\n)\n{\n    mileage_claim_collection.push_back(mileage_claim(name, miles, id));\n    return *this;\n}\n","mileage_claim_collection_builder.hpp":"#ifndef MILEAGE_CLAIM_COLLECTION_BUILDER_INCLUDED\n#define MILEAGE_CLAIM_COLLECTION_BUILDER_INCLUDED\n\n#include \"mileage_claim.hpp\"\n#include <string>\n#include <vector>\n\nclass mileage_claim_collection_builder\n{\npublic:\n    std::vector<mileage_claim> build() const;\n\n    mileage_claim_collection_builder & with_sales_person_miles_for_customer(\n        const std::string & name,\n        const int miles,\n        const int id\n    );\n\nprivate:\n    const static std::vector<mileage_claim> default_mileage_claim_collection;\n    std::vector<mileage_claim> mileage_claim_collection;\n};\n\n#endif\n","production_stats_service.cpp":"#include \"production_stats_service.hpp\"\n#include \"shouty_stats_service.hpp\"\n\n#include <tinyxml2.hpp>\n#include <memory>\n#include <sstream>\n\nusing std::ostringstream;\nusing std::stod;\nusing tinyxml2::XMLDocument;\n\nproduction_stats_service::production_stats_service()\n    : stats_service(std::make_unique<shouty_stats_service>())\n{\n}\n\ndouble production_stats_service::get_revenue(int customer_id) const\n{\n    ostringstream xmlRequest;\n    xmlRequest << \"<Customer id=\\\"\" << customer_id << \"\\\"/>\";\n    XMLDocument response;\n    response.Parse(stats_service->get_revenue_for_customer(xmlRequest.str()).c_str());\n    return stod(response.FirstChildElement(\"CustomerStats\")->Attribute(\"revenue\"));\n}\n","production_stats_service.hpp":"#ifndef PRODUCTION_STATS_SERVICE_INCLUDED\n#define PRODUCTION_STATS_SERVICE_INCLUDED\n\n#include \"shouty_stats_service.hpp\"\n#include \"stats_service.hpp\"\n#include <memory>\n\nclass production_stats_service : public stats_service\n{\npublic:\n    production_stats_service();\n    virtual double get_revenue(int customer_id) const;\nprivate:\n    std::unique_ptr<shouty_stats_service> stats_service;\n};\n\n#endif","shouty_report_job.cpp":"#include \"mileage_claim.hpp\"\n#include \"shouty_report_processor.hpp\"\n//#include \"stats_service.hpp\"\n//#include \"production_stats_service.hpp\"\n//#include \"../test/fake_stats_service.hpp\"\n#include <cstdlib>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <vector>\n\nusing std::getline;\nusing std::ifstream;\nusing std::istringstream;\nusing std::stoi;\nusing std::string;\nusing std::vector;\n\nvector<mileage_claim> read_mileage_claims(ifstream & ifs)\n{\n    vector<mileage_claim> claims;\n    while (ifs.peek() != ifstream::traits_type::eof())\n    {\n        string line;\n        getline(ifs, line);\n        istringstream iss(line);\n        string name;\n        getline(iss, name, ',');\n        string miles;\n        getline(iss, miles, ',');\n        string customer_id;\n        getline(iss, customer_id, ',');\n        mileage_claim claim(name, stoi(miles), stoi(customer_id));\n        claims.push_back(claim);\n    }\n    return claims;\n}\n\n/*\nstd::unique_ptr<stats_service> create_stats_service()\n{\n    const char * initialisation_data = std::getenv(\"FAKE_INITIALISATION_DATA\");\n    if (initialisation_data != NULL)\n        return std::make_unique<fake_stats_service>(\n            initialisation_data\n        );\n    else\n        return std::make_unique<production_stats_service>();\n}\n*/\n\nint main(int argc, char * argv[])\n{\n    if (argc != 2)\n    {\n        return EXIT_FAILURE;\n    }\n\n    const char * filename = argv[1];\n    ifstream path(filename);\n    if (!path.good())\n    {\n        return EXIT_FAILURE;\n    }\n\n    vector<mileage_claim> mileage_claims = read_mileage_claims(path);\n    shouty_report_processor job(mileage_claims);\n    job.process();\n    return EXIT_SUCCESS;\n}\n","shouty_report_processor.cpp":"#include \"shouty_report_processor.hpp\"\n#include \"production_stats_service.hpp\"\n#include <tinyxml2.hpp>\n#include <iomanip>\n#include <sstream>\n#include <string>\n\nusing std::make_unique;\nusing std::ostringstream;\nusing std::stod;\nusing std::setprecision;\nusing tinyxml2::XMLDocument;\nusing tinyxml2::XMLElement;\n\nshouty_report_processor::shouty_report_processor(\n    const std::vector<mileage_claim> & claims\n)\n    : claims_(claims)\n    , stats_service_(make_unique<production_stats_service>())\n{\n}\n\nvoid shouty_report_processor::process() const\n{\n    XMLDocument xmldoc;\n    xmldoc.InsertEndChild(xmldoc.NewDeclaration());\n\n    XMLElement * root = xmldoc.NewElement(\"ecoReport\");\n    xmldoc.InsertEndChild(root);\n\n    for (auto && claim : claims_)\n    {\n        if (claim.miles() == 0) {\n            continue;\n        }\n\n        ostringstream xmlRequest;\n        xmlRequest << \"<Customer id=\\\"\" << claim.customer_id() << \"\\\"/>\";\n        //XMLDocument response;\n        //response.Parse(stats_service_->get_revenue(xmlRequest.str()).c_str());\n        double revenue = stats_service_->get_revenue(claim.customer_id());\n\n        ostringstream oss;\n        oss << setprecision(7) << (revenue / claim.miles());\n\n        XMLElement * child = xmldoc.NewElement(\"ecoStat\");\n        child->SetAttribute(\"RevenuePerMile\", oss.str().c_str());\n        child->SetAttribute(\"SalesPersonName\", claim.name().c_str());\n        root->InsertEndChild(child);\n    }\n\n    xmldoc.SaveFile(\"report.xml\");\n}\n","shouty_report_processor.hpp":"#ifndef SHOUTY_REPORT_PROCESSOR_INCLUDED\n#define SHOUTY_REPORT_PROCESSOR_INCLUDED\n\n#include \"mileage_claim.hpp\"\n#include \"stats_service.hpp\"\n#include <memory>\n#include <vector>\n\nclass shouty_report_processor\n{\npublic:\n    explicit shouty_report_processor(const std::vector<mileage_claim> &);\n    void process() const;\n\nprivate:\n    std::vector<mileage_claim> claims_;\n    std::unique_ptr<stats_service> stats_service_;\n};\n\n#endif\n","shouty_stats_service.hpp":"#ifndef SHOUTY_STATS_SERVICE_INCLUDED\n#define SHOUTY_STATS_SERVICE_INCLUDED\n\n#include <map>\n#include <random>\n#include <string>\n\nnamespace tinyxml2\n{\n    class XMLElement;\n}\n\nclass shouty_stats_service\n{\npublic:\n    shouty_stats_service();\n    std::string get_revenue_for_customer(const std::string & customer_xml) const;\n    std::string get_customer_ids() const;\n    std::string is_valid_customer(const std::string & customer_xml) const;\n    std::string get_latest_eco_stats_date() const;\n    void set_eco_stats(const std::string & eco_stats_xml);\n    std::string get_eco_stats_winner_for(const std::string & date_xml) const;\n\nprivate:\n    void check_service_connection() const;\n    void store_eco_stats(const std::string & key, const tinyxml2::XMLElement * root);\n    std::string create_key(int year, int month) const;\n    int get_customer_id(const std::string & xml) const;\n\nprivate:\n    mutable std::default_random_engine generator;\n    mutable std::uniform_int_distribution<int> distribution;\n    mutable std::uniform_int_distribution<int> revenue_distribution;\n    mutable std::uniform_int_distribution<int> customer_id_distribution;\n    std::map<int,std::string> revenue_by_customer_id;\n\n    int latest_eco_stats_month;\n    int latest_eco_stats_year;\n    mutable std::map<std::string, std::map<std::string, double>> eco_stats_store;\n};\n\n#endif\n","shouty_stats_service_exception.cpp":"#include \"shouty_stats_service_exception.hpp\"\n\nshouty_stats_service_exception::shouty_stats_service_exception(\n    const std::string & message\n)\n    : std::runtime_error(message)\n{\n}\n","shouty_stats_service_exception.hpp":"#ifndef SHOUTY_STATS_SERVICE_EXCEPTION_INCLUDED\n#define SHOUTY_STATS_SERVICE_EXCEPTION_INCLUDED\n\n#include <stdexcept>\n#include <string>\n\nclass shouty_stats_service_exception : public std::runtime_error\n{\npublic:\n    explicit shouty_stats_service_exception(const std::string &);\n};\n\n#endif\n","stats_service.hpp":"#ifndef STATS_SERVICE_INCLUDED\n#define STATS_SERVICE_INCLUDED\n\nclass stats_service\n{\npublic:\n    virtual ~stats_service() {}\n    virtual double get_revenue(int customer_id) const = 0;\n};\n\n#endif","stats_service.contract.tests.cpp":"#include <cassert>\n#include <iostream>\n\nnamespace {\n\n  void production_returns_revenue_for_valid_customer_id()\n  {\n  }\n\n  void production_throws_exception_for_invalid_customer_id()\n  {\n  }\n\n} // namespace\n\n\nint main()\n{\n    production_returns_revenue_for_valid_customer_id();\n    production_throws_exception_for_invalid_customer_id();\n\n    std::cout << \"tests (contract) passed\" << std::endl;\n}\n","test_case_1_expected.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n    <ecoStat RevenuePerMile=\"0.9496675\" SalesPersonName=\"David Allen\"/>\n</ecoReport>\n","test_case_1_input.csv":"David Allen,130000,57\n","test_case_2_expected.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n    <ecoStat RevenuePerMile=\"0.9496675\" SalesPersonName=\"David Allen\"/>\n    <ecoStat RevenuePerMile=\"4.572473\" SalesPersonName=\"Lisa Crispin\"/>\n    <ecoStat RevenuePerMile=\"0.006417054\" SalesPersonName=\"Ian Dees\"/>\n</ecoReport>\n","test_case_2_input.csv":"David Allen,130000,57\nLisa Crispin,27000,19\nIan Dees,19238855,22","unit.tests.cpp":"#include \"mileage_claim.hpp\"\n#include \"tinyxml2.hpp\"\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <vector>\n\nusing std::string;\nusing tinyxml2::XMLDocument;\n\nnamespace {\n\nvoid mileage_claim_can_be_created_from_strings()\n{\n    const mileage_claim claim(\"David Allen\", 37000, 99);\n    assert(claim.name() == \"David Allen\");\n    assert(claim.miles() == 37000);\n    assert(claim.customer_id() == 99);\n}\n\nvoid extract_data_from_xml()\n{\n    const char * xml = \"<CustomerStats id=\\\"22\\\" revenue=\\\"300.00\\\"/>\";\n    XMLDocument doc;\n    doc.Parse(xml);\n    const string revenue(doc.FirstChildElement(\"CustomerStats\")->Attribute(\"revenue\"));\n    assert(revenue == \"300.00\");\n}\n\n} // namespace\n\nint main()\n{\n    mileage_claim_can_be_created_from_strings();\n    extract_data_from_xml();\n\n    std::cout << \"tests (unit) passed\" << std::endl;\n}\n","zzz_DONT_READ_ME.cpp":"// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#include \"shouty_stats_service.hpp\"\n#include \"shouty_stats_service_exception.hpp\"\n#include <cstdlib>\n#include <iomanip>\n#include <sstream>\n#include <tinyxml2.hpp>\n\nusing std::getenv;\nusing std::map;\nusing std::stoi;\nusing std::string;\nusing std::stringstream;\nusing std::to_string;\nusing tinyxml2::XMLDocument;\nusing tinyxml2::XMLElement;\n\nshouty_stats_service::shouty_stats_service()\n    : generator(std::random_device()())\n    , distribution(1, 10)\n    , revenue_distribution(0, 99999999)\n    , customer_id_distribution(1, 1000)\n    , revenue_by_customer_id({\n        {  1,    \"234.50\" },\n        { 19, \"123456.78\" },\n        { 22, \"123456.78\" },\n        { 57, \"123456.78\" }\n      })\n    , latest_eco_stats_month(0)\n    , latest_eco_stats_year(0)\n{\n    if (getenv(\"VOLATILE_STATS_DATA\") != NULL)\n    {\n        revenue_by_customer_id.clear();\n        for (int i = 0; i < 10; i++)\n        {\n            double random_revenue = revenue_distribution(generator) / 100.0;\n            revenue_by_customer_id.insert({\n                customer_id_distribution(generator),\n                to_string(random_revenue)\n            });\n        }\n    }\n}\n\nstring shouty_stats_service::get_revenue_for_customer(const std::string & customer_xml) const\n{\n    check_service_connection();\n    int customer_id = get_customer_id(customer_xml);\n    auto pos = revenue_by_customer_id.find(customer_id);\n    if (pos == revenue_by_customer_id.end())\n    {\n        const string message(\"No customer found with ID '\"\n            + to_string(customer_id)\n            + \"'\");\n        throw shouty_stats_service_exception(message);\n    }\n\n    stringstream response;\n    response << \"<CustomerStats id=\\\"\"\n             << customer_id\n             << \"\\\" revenue=\\\"\"\n             << pos->second\n             << \"\\\"/>\";\n    return response.str();\n}\n\nstring shouty_stats_service::get_customer_ids() const\n{\n    stringstream response;\n    response << \"<Customers>\";\n    for (auto & customer_data : revenue_by_customer_id)\n    {\n        response << \"<Customer id=\\\"\"\n                 << customer_data.first\n                 << \"\\\"/>\";\n    }\n    response << \"</Customers>\";\n    return response.str();\n}\n\nstring shouty_stats_service::is_valid_customer(const string & customer_xml) const\n{\n    int id = get_customer_id(customer_xml);\n    if (revenue_by_customer_id.find(id) != revenue_by_customer_id.end())\n    {\n        return \"<booleanResponse result=\\\"TRUE\\\" />\";\n    }\n    else\n    {\n        return \"<booleanResponse result=\\\"FALSE\\\" />\";\n    }\n}\n\nstring shouty_stats_service::get_latest_eco_stats_date() const\n{\n    stringstream response;\n\n    response << \"<LatestEcoStatsDate year=\\\"\"\n             << latest_eco_stats_year\n             << \"\\\" month=\\\"\"\n             << latest_eco_stats_month\n             << \"\\\" />\";\n\n    return response.str();\n}\n\nvoid shouty_stats_service::set_eco_stats(const string & eco_stats_xml)\n{\n    XMLDocument request;\n    request.Parse(eco_stats_xml.c_str());\n    const XMLElement * root = request.FirstChildElement(\"EcoStats\");\n    const int month = stoi(root->Attribute(\"month\"));\n    const int year = stoi(root->Attribute(\"year\"));\n    auto key = create_key(year, month);\n\n    if (year < latest_eco_stats_year ||\n            (year == latest_eco_stats_year && month < latest_eco_stats_month))\n    {\n        throw shouty_stats_service_exception(\"EcoStats for a later month have already been set\");\n    }\n\n    store_eco_stats(key, root->FirstChildElement(\"EcoStat\"));\n\n    latest_eco_stats_year = year;\n    latest_eco_stats_month = month;\n}\n\nstring shouty_stats_service::get_eco_stats_winner_for(const string & date_xml) const\n{\n    string winners_name = \"Nobody\";\n    double winning_revenue_per_mile = 0;\n\n    XMLDocument request;\n    request.Parse(date_xml.c_str());\n    const int month = stoi(request.FirstChildElement(\"EcoStats\")->Attribute(\"month\"));\n    const int year = stoi(request.FirstChildElement(\"EcoStats\")->Attribute(\"year\"));\n    auto key = create_key(year, month);\n\n    auto iterator = eco_stats_store.find(key);\n    if (iterator != eco_stats_store.end())\n    {\n        for (auto & stat : iterator->second)\n        {\n            if (stat.second > winning_revenue_per_mile)\n            {\n                winners_name = stat.first;\n                winning_revenue_per_mile = stat.second;\n            }\n        }\n    }\n\n    return \"<ecoStatsWinner SalespersonName=\\\"\" +\n            winners_name +\n            \"\\\" />\";\n}\n\nint shouty_stats_service::get_customer_id(const string & xml) const\n{\n    XMLDocument request;\n    request.Parse(xml.c_str());\n    return stoi(request.FirstChildElement(\"Customer\")->Attribute(\"id\"));\n}\n\nstring shouty_stats_service::create_key(int year, int month) const\n{\n    stringstream key;\n    key << year << \"-\" << month;\n    return key.str();\n}\n\nvoid shouty_stats_service::store_eco_stats(const string & key, const XMLElement * element)\n{\n    map<string, double> stats;\n    while (element != NULL)\n    {\n        const string name(element->Attribute(\"salesPersonName\"));\n        const double rpm(atof(element->Attribute(\"revenuePerMile\")));\n        stats[name] = rpm;\n        element = element->NextSiblingElement();\n    }\n    eco_stats_store[key] = stats;\n}\n\nvoid shouty_stats_service::check_service_connection() const\n{\n    const bool connection_is_reliable = (getenv(\"RELIABLE_CONNECTION\") != NULL);\n    if (connection_is_reliable)\n    {\n        return;\n    }\n    const int parity_control = distribution(generator);\n    if (parity_control == 1)\n    {\n        const string message =\n            \"shouty_stats_service connection error - please a wait a few moments and try your request again\";\n        throw shouty_stats_service_exception(message);\n    }\n}\n","output":"\nmake: `unit' is up to date.\ntests (unit) passed\n\nmake: `contract' is up to date.\ntests (contract) passed\n\nmake: `shouty_report_job' is up to date.\n\nmake: `e2e' is up to date.\ntests (end2end) passed\n\nAll tests passed\n","test_case_3_input.csv":"David Allen,130000,57\nLisa Crispin,27000,19\nIan Dees,0,22","test_case_3_expected.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n    <ecoStat RevenuePerMile=\"0.9496675\" SalesPersonName=\"David Allen\"/>\n    <ecoStat RevenuePerMile=\"4.572473\" SalesPersonName=\"Lisa Crispin\"/>\n</ecoReport>\n"}