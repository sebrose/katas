{"CountDown.java":"class CountDown<I> extends Object {\n CountDown() {\n    super();\n    CountDown<Byte>b=new CountDown<>();\n    (()->{})\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\njavac CountDown.java\nif [ $? != 0 ]; then \n  echo \n  echo \">>> Score = 0\"\n  echo \">>> [CountDown.java does not compile]\"\n  echo\n  exit\nfi\n\njavac Tokens.java Scorer.java\njava -cp . Scorer CountDown.java","rules":"Your task is to write a Java program in the file CountDown.java \nthat compiles and uses all of the tokens listed in Tokens.java\nThe smaller your program the higher your score.\nThe size of the program does not include whitespace\nso please format the code nicely for the reviews.\n\nEach time you press the [test] button cyber-dojo\n  o) sees if CountDown.java compiles\n  o) tells your your score\n  o) tells you exactly how your score is calculated\n\n\nSCORING\n-------\nscore = minus the size of CountDown.java\nfor each token you have used in CountDown.java\n  score += 3*token.size \nif (all tokens used in CountDown.java)\n  score += 50\n\n\nRULES\n-----\no) You may edit only the file CountDown.java\no) The size of the program does not include whitespace\no) The code is not run (so you do not need a main)\no) The code has to compile \no) The code may have warnings\no) The code may have extra tokens!\no) Tokens must be whole tokens\n   eg you cannot use the keyword double for the do keyword\n   eg you cannot use ... for the . operator\no) Keyword tokens must be keywords\n   eg you cannot use the string \"do\" for the do keyword\no) The judges decision is final\n\n","Scorer.java":"import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Scorer {\n\n    int lineSize(String line) {\n        char[] chars = line.toCharArray();\n        int size = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (!isSpace(chars[i]))\n                size++;\n        }\n        return size;\n    }\n\n    boolean isSpace(char aChar) {\n        return String.valueOf(aChar).trim().isEmpty();\n    }\n\n    int linesSize(List<String> lines) {\n        int size = 0;\n        for (String line : lines) {\n            size += lineSize(line);\n        }\n        return size;\n    }\n\n\n    String hr(int width) {\n        StringBuffer buf = new StringBuffer();\n\n        buf.append(\"------|\");\n        for (int i = 0; i < width; i++) {\n            buf.append(\"-\");\n        }\n\n        return buf.toString();\n    }\n\n    void printProgramSize(List<String> lines, PrintStream out) {\n\n        int totalSize = 0;\n\n        out.println(hr(60));\n\n        for (String line : lines) {\n            int size = lineSize(line);\n\n            out.printf(\" %3d  |%s\\n\", size, line);\n            totalSize += size;\n        }\n\n        out.println(hr(60));\n\n        out.println(\"   \" + totalSize + \" == CountDown.java.size\");\n    }\n\n// - - - - - - - - - - - - - - - - - - - -\n\n    List<String> readLines(String filename) {\n        List<String> lines = new ArrayList<>();\n\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(filename)));\n            String sCurrentLine;\n            while ((sCurrentLine = reader.readLine()) != null) {\n                lines.add(sCurrentLine);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        return lines;\n    }\n\n// - - - - - - - - - - - - - - - - - - - -\n\n    boolean uses(List<String> lines, String token) {\n        // ... also matches .\n        // double also matches do\n        // etc etc\n\n        for (String line : lines) {\n            if (line.contains(token)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    int tokensSize(List<String> lines) {\n        int size = 0;\n        for (String token : Tokens.tokens) {\n            if (uses(lines, token)) {\n                size += token.length();\n            }\n        }\n\n        return size;\n    }\n\n    boolean missingTokens(List<String> lines) {\n        for (String token : Tokens.tokens) {\n            if (!uses(lines, token)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n// - - - - - - - - - - - - - - - - - - - -\n\n    void printTokenBonuses(List<String> lines, PrintStream out) {\n        int tokensSize = 0;\n        out.println(hr(20));\n\n        for (String token : Tokens.tokens) {\n            if (uses(lines, token)) {\n                out.printf(\" %3d  |%s\\n\", token.length(), token);\n                tokensSize += token.length();\n            }\n        }\n\n        for (String token : Tokens.tokens) {\n            if (!uses(lines, token)) {\n                out.printf(\" %3d  |%s\\n\", 0, token);\n            }\n        }\n\n        out.println(hr(20));\n\n        out.printf(\" %3d == used_tokens.size\\n\", tokensSize);\n\n        int completion_bonus = missingTokens(lines) ? 0 : 100;\n\n        out.printf(\" %3d == completion.bonus\\n\", completion_bonus);\n    }\n\n// - - - - - - - - - - - - - - - - - - - -\n\n    public void score(String filename, PrintStream out) {\n        score(readLines(filename), out);\n\n        // green-traffic light pattern...put it out of sight\n        for (int i = 0; i < 100; i++)\n            out.println();\n        out.print(\"OK (1 test)\");\n    }\n\n    public void score(List<String> lines, PrintStream out) {\n        int program_size = linesSize(lines);\n        int used_token_bonus = tokensSize(lines);\n        int completion_bonus = missingTokens(lines) ? 0 : 100;\n\n        out.println(\">>> Score = -CountDown.java.size + 5*usedTokens.size + completion.bonus\");\n        out.println(\">>>       = \" + (-program_size) + \" + 5*\" + used_token_bonus + \" + \" + completion_bonus);\n        out.println(\">>>       = \" + (-program_size + (5 * used_token_bonus) + completion_bonus));\n\n        out.println();\n        printTokenBonuses(lines, out);\n        out.println();\n        printProgramSize(lines, out);\n    }\n\n    public static void main(String[] args) {\n        new Scorer().score(args[0], System.out);\n    }\n\n}","Tokens.java":"public class Tokens {\n    public static final String[] tokens = {\n      \"<>\",\n      \"->\",\n      \"::\",\n      \"?\",\n      \"stream\",\n      \"default\",\n      \"super\"\n    };\n}\n","output":"\n>>> Score = 0\n>>> [CountDown.java does not compile]\n\nCountDown.java:5: error: not a statement\n    (()->{})\n    ^\nCountDown.java:5: error: ';' expected\n    (()->{})\n            ^\n2 errors\n"}