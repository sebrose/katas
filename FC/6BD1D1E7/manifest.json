{"id":"FC6BD1D1E7","created":[2017,5,19,10,41,16],"image_name":"cyberdojofoundation/nasm_assert","display_name":"Asm, assert","filename_extension":".asm","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"language":"Asm-assert","tab_size":4,"visible_files":{"hiker.tests.c":"#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n    assert(answer() == 42);\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    // green-traffic light pattern...\n    puts(\"All tests passed\");\n}\n","hiker.h":"#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(void);\n\n#endif\n","hiker.asm":"global answer\r\n\r\nsection .text\r\nanswer:\r\n    mov eax, 6\r\n    mov ebx, 9\r\n    imul ebx\r\n    ret","makefile":"CFLAGS += -I. -std=c99 -Wall -Wextra -Werror \\\n\t-Wstrict-prototypes -Wmissing-prototypes \\\n\t-Wshadow -Wfloat-equal -O\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\nASM_FILES = $(wildcard *.asm)\nCOMPILED_ASM_FILES = $(patsubst %.asm,%.asm_o,$(ASM_FILES))\n\ntest: makefile $(COMPILED_H_FILES) $(C_FILES) $(COMPILED_ASM_FILES)\n\t@gcc $(C_FLAGS) $(C_FILES) $(COMPILED_ASM_FILES) -o $@\n\t@./$@\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<\n\n%.asm_o: %.asm\n\t@nasm -f elf64 -o $@ $<\n","cyber-dojo.sh":"make","output":"","instructions":"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition.\n\nYou start with a two dimensional grid of cells, where\neach cell is either alive or dead. The grid is finite,\nand no life can exist off the edges. When calculating\nthe next generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours\n   dies, as if caused by underpopulation.\n2. Any live cell with more than three live neighbours\n   dies, as if by overcrowding.\n3. Any live cell with two or three live neighbours\n   lives on to the next generation.\n4. Any dead cell with exactly three live neighbours\n   becomes a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n"},"exercise":"Game_of_Life"}