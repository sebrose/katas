{"cyber-dojo.sh":"NUNIT_PATH=/nunit/NUnit.2.6.2/lib\nexport MONO_PATH=${NUNIT_PATH}\n\nmcs -t:exe \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:ShoutyReportJob.exe *.cs\n\nmcs -t:library \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/NUnit.Runners.2.6.1/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit-console.exe -nologo ./RunTests.dll\nfi\n","EcoStat.cs":"public class EcoStat\n{\n    public string SalesPersonName { get; private set; }\n    public float RevenuePerMile { get; private set; }\n\n    public EcoStat(string salesPersonName, float revenuePerMile)\n    {\n        this.SalesPersonName = salesPersonName;\n        this.RevenuePerMile = revenuePerMile;\n    }\n}\n","EcoStatCollectionBuilder.cs":"using System.Collections.Generic;\n\npublic class EcoStatCollectionBuilder\n{\n    private List<EcoStat> defaultEcoStatCollection =\n        new List<EcoStat>(){\n            new EcoStat(\"David Allen\", 1.234f),\n            new EcoStat(\"Lisa Crispin\", 0.025f),\n            new EcoStat(\"Ian Dees\", 98.76f)\n        };\n\n    private Dictionary<string, float> ecoStatData = null;\n\n    public List<EcoStat> Build()\n    {\n        if (ecoStatData == null)\n        {\n            return defaultEcoStatCollection;\n        }\n        else\n        {\n            List<EcoStat> ecoStatCollection = new List<EcoStat>();\n\n            foreach(KeyValuePair<string, float> entry in ecoStatData)\n            {\n                ecoStatCollection.Add(new EcoStat(entry.Key, entry.Value));\n            }\n\n            return ecoStatCollection;\n        }\n    }\n\n    public EcoStatCollectionBuilder WithSalesPersonRpm(string name, float rpm)\n    {\n        if (ecoStatData == null)\n        {\n            ecoStatData = new Dictionary<string, float>();\n        }\n\n        ecoStatData[name] = rpm;\n        return this;\n    }\n}\n","EndToEndTests.cs":"using System.IO;\nusing System.Xml;\nusing System.Linq;\nusing System.Collections.Generic;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class EndToEndTests\n{\n    \n\n    [Test]\n    public void multiple_sales_people()\n    {\n        // run report\n        Run(\"ShoutyReportJob.exe\", \"test_case_2_input.csv\");\n\n        // check XML report has been generated\n        Assert.IsTrue(File.Exists(\"report.xml\"));\n        assertXmlFilesEqual(\n            \"test_case_2_expected.xml\",\n            \"report.xml\"\n        );\n    }\n\n    [Test]\n    public void multiple_sales_people_with_zero_milage()\n    {\n        // run report\n        Run(\"ShoutyReportJob.exe\", \"test_case_3_input.csv\");\n\n        // check XML report has been generated\n        Assert.IsTrue(File.Exists(\"report.xml\"));\n        assertXmlFilesEqual(\n            \"test_case_3_expected.xml\",\n            \"report.xml\"\n        );\n    }\n\n    [Test]\n    public void single_sales_people_with_multiple_visits()\n    {\n        // run report\n        Run(\"ShoutyReportJob.exe\", \"test_case_4_input.csv\");\n\n        // check XML report has been generated\n        Assert.IsTrue(File.Exists(\"report.xml\"));\n        assertXmlFilesEqual(\n            \"test_case_4_expected.xml\",\n            \"report.xml\"\n        );\n    }\n\n    private void Run(string exe, string args)\n    {\n        if (File.Exists(\"report.xml\"))\n        {\n            File.Delete(\"report.xml\");\n        }\n\n        System.Diagnostics.Process proc = new System.Diagnostics.Process();\n        proc.EnableRaisingEvents = false;\n        proc.StartInfo.FileName = exe;\n        proc.StartInfo.Arguments = args;\n        proc.StartInfo.EnvironmentVariables.Add(\n             \"FAKE_INITIALISATION_DATA\",\n             \"19,123456.78;22,123456.78;57,123456.78\"\n        );\n        proc.StartInfo.UseShellExecute = false;\n        proc.Start();\n        proc.WaitForExit();\n    }\n\n    private void assertXmlFilesEqual(string expectedPath, string actualPath)\n    {\n        var expectedXml = File.ReadAllText(expectedPath);\n        var expectedDoc = new XmlDocument();\n        expectedDoc.LoadXml(expectedXml);\n\n        var actualXml = File.ReadAllText(actualPath);\n        var actualDoc = new XmlDocument();\n        actualDoc.LoadXml(actualXml);\n\n        List<Dictionary<string, object>> expected = documentToListOfMaps(expectedDoc);\n        List<Dictionary<string, object>> actual = documentToListOfMaps(actualDoc);\n\n        string message = string.Format(\"Expected XML to contain {0}, but got {1}\", expectedXml, actualXml);\n        Assert.AreEqual(expected.Count, actual.Count, message);\n        for (int i = 0; i < expected.Count; i++)\n        {\n            Dictionary<string, object> entry = expected[i];\n\n            bool dictionariesEqual =\n                actual[i].Keys.All(k => entry.ContainsKey(k) && object.Equals(entry[k], actual[i][k]));\n            Assert.IsTrue(dictionariesEqual, message);\n        }\n    }\n\n    private static List<Dictionary<string, object>> documentToListOfMaps(XmlDocument document)\n    {\n        List<Dictionary<string, object>> result = new List<Dictionary<string, object>>();\n        XmlNodeList nodes = document.DocumentElement.ChildNodes;\n        for (int nodeIndex = 0; nodeIndex < nodes.Count; nodeIndex++)\n        {\n            XmlNode node = nodes.Item(nodeIndex);\n            if (node.NodeType == XmlNodeType.Element)\n            {\n                XmlAttributeCollection nodeMap = node.Attributes;\n                Dictionary<string, object> nodeResult = new Dictionary<string, object>();\n                for (int i = 0; i < nodeMap.Count; i++)\n                {\n                    XmlNode attr = nodeMap.Item(i);\n                    nodeResult.Add(attr.Name, attr.Value);\n                }\n\n                result.Add(nodeResult);\n            }\n        }\n        return result;\n    }\n}\n","FakeStatsServiceBuilder.cs":"using System.Collections.Generic;\n\npublic class FakeStatsServiceBuilder\n{\n    private string defaultCustomerData = \"19,123456.78;22,123456.78;57,123456.78\";\n    private Dictionary<int, double> builderData = null;\n\n    public IStatsService Build() \n    {\n        string initialisationData = \"\";\n\n        if (builderData == null)\n        {\n            initialisationData = defaultCustomerData;\n        } else {\n            string separator = \"\";\n\n            foreach(KeyValuePair<int, double> entry in builderData)\n            {\n                initialisationData += separator + entry.Key + \",\" + entry.Value;\n                separator = \";\";\n            }\n        }\n        return new FakeStatsService(initialisationData);\n    }\n\n    public FakeStatsServiceBuilder WithCustomerRevenue(int id, double revenue)\n    {\n        if (builderData == null)\n        {\n            builderData = new Dictionary<int, double>();\n        }\n\n        builderData.Add(id, revenue);\n\n        return this;\n    }\n}\n","FakeStatsService.cs":"ï»¿using System.Collections.Generic;\n\npublic class FakeStatsService : IStatsService\n{\n    IDictionary<int, decimal> revenueData = new Dictionary<int, decimal>();\n\n    public FakeStatsService(string data)\n    {\n        foreach (var tuple in data.Split(';'))\n        {\n            var pair = tuple.Split(',');\n            revenueData[int.Parse(pair[0])] = decimal.Parse(pair[1]);\n        }\n    }\n\n    public decimal GetRevenue(int customerId)\n    {\n        if (customerId == 25)\n            throw new ShoutyStatsServiceException(\"Invalid customer id\");\n\n        return revenueData[customerId];\n    }\n    \n    public void SetEcoStats(string ecoStatsXml)\n    {\n    }\n    \n    public string GetEcoStatsWinnerFor(string dateXml)\n    {\n    \treturn \"\";\n    }\n}\n","IStatsService.cs":"public interface IStatsService\n{\n    decimal GetRevenue(int customerId);\n    void SetEcoStats(string ecoStatsXml);\n    string GetEcoStatsWinnerFor(string dateXml);\n}\n","MileageClaim.cs":"public class MileageClaim\n{\n    public string Name { get; private set; }\n    public int Miles { get; private set; }\n    public int CustomerID { get; private set; }\n\n    public MileageClaim(string name, int miles, int customerId)\n    {\n        this.Name = name;\n        this.Miles = miles;\n        this.CustomerID = customerId;\n    }\n}\n","MileageClaimCollectionBuilder.cs":"using System.Collections.Generic;\n\npublic class MileageClaimCollectionBuilder\n{\n    private List<MileageClaim> defaultMileageClaimCollection =\n        new List<MileageClaim>()\n        {\n            new MileageClaim(\"David Allen\", 130000, 57),\n            new MileageClaim(\"Lisa Crispin\", 27000, 19),\n            new MileageClaim(\"Ian Dees\", 19238855, 22)\n        };\n\n    private List<MileageClaim> mileageClaimCollection = null;\n\n    public List<MileageClaim> Build()\n    {\n        if (mileageClaimCollection == null)\n        {\n            return defaultMileageClaimCollection;\n        }\n        else\n        {\n            return mileageClaimCollection;\n        }\n    }\n\n    public MileageClaimCollectionBuilder WithSalesPersonMilesForCustomer(\n      string name,\n      int miles,\n      int id)\n    {\n\n        if (mileageClaimCollection == null)\n        {\n            mileageClaimCollection = new List<MileageClaim>();\n        }\n\n        mileageClaimCollection.Add(new MileageClaim(name, miles, id));\n        return this;\n    }\n}\n","ProductionStatsService.cs":"using System.IO;\nusing System.Xml;\n\npublic class ProductionStatsService : IStatsService\n{\n    private ShoutyStatsService service;\n    \n    public ProductionStatsService(ShoutyStatsService service)\n    {\n        this.service = service;\n    }\n\n    public decimal GetRevenue(int customerId)\n    {\n        \n            string requestXml = \"<Customer id=\\\"\" + customerId + \"\\\"/>\";\n            string responseXml = service.GetRevenueForCustomer(requestXml);\n\n            var responseDocument = new XmlDocument();\n            responseDocument.LoadXml(responseXml);\n            return decimal.Parse(responseDocument.DocumentElement.Attributes[\"revenue\"].Value);\n        \n\n        //throw new System.NotImplementedException(\"Uncomment code above and delete this exception\");\n    }\n\n    public void SetEcoStats(string ecoStatsXml)\n    {    \t        \n        service.SetEcoStats(ecoStatsXml);            \n    }\n    \n    public string GetEcoStatsWinnerFor(string dateXml)\n    {\n    \treturn service.GetEcoStatsWinnerFor(dateXml);        \n    }\n}\n","ShoutyReportJob.cs":"ï»¿using System.IO;\nusing System.Collections.Generic;\n\nclass ShoutyReportJob\n{\n    public static void Main(string[] args)\n    {\n        var path = args[0];\n        var mileageClaims = ReadMileageClaims(path);\n        var statsService = CreateStatsService();\n\n        var job = new ShoutyReportProcessor(mileageClaims, statsService);\n        var ecoStats = job.Process();\n        job.SetEcoStats(ecoStats, 5, 2017);\n        job.WriteEcoStatsReport(ecoStats);\n    }\n\n        \n    private static IStatsService CreateStatsService()\n    {\n        if (System.Environment.GetEnvironmentVariable(\"FAKE_INITIALISATION_DATA\") != null)\n        {\n            return new FakeStatsService(\n                System.Environment.GetEnvironmentVariable(\"FAKE_INITIALISATION_DATA\"));\n        }\n\n        return new ProductionStatsService(new ShoutyStatsService());\n    }\n    \n\n    private static IList<MileageClaim> ReadMileageClaims(string claimsPath)\n    {\n        var mileageClaims = new List<MileageClaim>();\n        using (var reader = new StreamReader(claimsPath))\n        {\n            while (!reader.EndOfStream)\n            {\n                var values = reader.ReadLine().Split(',');\n                mileageClaims.Add(new MileageClaim(values[0], int.Parse(values[1]), int.Parse(values[2])));\n            }\n        }\n        return mileageClaims;\n    }\n    \n    public string GetEcoStatsWinnerFor(int month, int year)\n    {\n        var statsService = CreateStatsService();\n        string dateXml = \"<EcoStats month=\\\"\" + month + \"\\\" year=\\\"\" + year + \"\\\" />\";                \n        return statsService.GetEcoStatsWinnerFor(dateXml);        \n    }\n}\n","ShoutyReportProcessor.cs":"ï»¿using System.Collections.Generic;\nusing System.Xml;\n\nclass ShoutyReportProcessor\n{\n    IList<MileageClaim> mileageClaims;\n    IStatsService statsService;\n    IDictionary<string, IList<MileageClaim>> totalMileage;\n\n    public ShoutyReportProcessor(IList<MileageClaim> mileageClaims, IStatsService statsService)\n    {\n        this.mileageClaims = mileageClaims;\n        this.statsService = statsService;\n        this.totalMileage = new Dictionary<string, IList<MileageClaim>>();\n    }\n\n    public IList<EcoStat> Process()\n    {\n        foreach(var claim in mileageClaims)\n        {\n            if (!totalMileage.ContainsKey(claim.Name))\n            {\n                var mileage = new List<MileageClaim>();\n                mileage.Add(claim);\n                totalMileage.Add(claim.Name, mileage); \n            }\n            else\n            {\n                var mileage = totalMileage[claim.Name];\n                mileage.Add(claim);\n                totalMileage[claim.Name] = mileage;                \n            }\n        }\n\n        var ecoStats = new List<EcoStat>();\n        \n        foreach(KeyValuePair<string, IList<MileageClaim>> entry in totalMileage)\n        {\n            var name = entry.Key;\n            var totalMileage = entry.Value;\n            var sumMiles = 0;\n            foreach(var mileage in totalMileage)\n            {\n                sumMiles += mileage.Miles;\n            }\n            \n            var sumRevenue = (decimal) 0;\n            foreach(var claim in totalMileage)\n            {\n                var revenue = this.statsService.GetRevenue(claim.CustomerID);\n                sumRevenue += revenue;\n            }\n\n            var revenuePerMile = 0.0f;\n            if ((float)sumMiles == 0) \n            {\n                revenuePerMile = 0;\n            }\n            else\n            {\n                revenuePerMile = (float)sumRevenue / (float)sumMiles;\n            }\n            \n            var item = new EcoStat(name, revenuePerMile);\n            ecoStats.Add(item);            \n        } \n        return ecoStats;\n    }\n\n    public void WriteEcoStatsReport(IList<EcoStat> results)\n    {\n        XmlDocument reportXml = new XmlDocument();\n        reportXml.LoadXml(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><ecoReport/>\");\n            \n        foreach(var ecoStat  in results)\n        {\n            var salesPersonName = ecoStat.SalesPersonName;\n            var revenuePerMile = ecoStat.RevenuePerMile;\n            XmlElement node = reportXml.CreateElement(string.Empty, \"ecoStat\", string.Empty);\n            node.SetAttribute(\"SalespersonName\", salesPersonName);\n            node.SetAttribute(\"RevenuePerMile\", System.Convert.ToString(revenuePerMile));\n            reportXml.DocumentElement.AppendChild(node);\n        }\n        reportXml.Save(\"report.xml\");\n    }\n    \n    public void SetEcoStats(IList<EcoStat> results, int month, int year)\n    {\n        string requestXml = \"<EcoStats month=\\\"\" + month + \"\\\" year=\\\"\" + year + \"\\\" >\";\n        foreach(var ecoStat in results)\n        {\n            requestXml += \"<EcoStat salesPersonName=\\\"\" + ecoStat.SalesPersonName + \"\\\" revenuePerMile=\\\"\" + ecoStat.RevenuePerMile + \"\\\" >\";        \t            \n        }\n        requestXml += \"</EcoStats>\";\n        this.statsService.SetEcoStats(requestXml);        \n    }\n}\n","ShoutyStatsServiceException.cs":"public class ShoutyStatsServiceException : System.Exception\n{\n    public ShoutyStatsServiceException(string message)\n        : base(message)\n    {\n    }\n}\n","StatsServiceContractTests.cs":"ï»¿using System;\nusing NUnit.Framework;\n\n\n[TestFixture]\npublic class StatsServiceContractTests\n{\n   \n\n    [Test]\n    public void production_returns_revenue_for_a_valid_customer_id()\n    {\n\n        var productionStatsService =BuildStatsService(false);\n        var customerId = 22;\n        var result = productionStatsService.GetRevenue(customerId);\n        Assert.AreEqual(result, 123456.78);\n    }\n\n    [Test]\n    public void production_throws_exception_for_invalid_customer_id()\n    {\n        var productionStatsService = BuildStatsService(false);\n        var customerId = 25;\n        \n        Assert.Throws( typeof(ShoutyStatsServiceException),\n              () => \n                { \n                    productionStatsService.GetRevenue(customerId); \n                });\n    }\n    \n     [Test]\n    public void production_returns_winner_of_may()\n    {\n        var productionStatsService = BuildStatsService(false);\n        var month = 5;\n        var year = 2017;\n        string dateXml = \"<EcoStats month=\\\"\" + month + \"\\\" year=\\\"\" + year + \"\\\" />\";                \n        var result = productionStatsService.GetEcoStatsWinnerFor(dateXml);\n        Assert.AreEqual(result, \"\");\n    }\n\n    [Test]\n    public void fake_returns_revenue_for_a_valid_customer_id()\n    {\n        var fakeStatsService = BuildStatsService(true);\n        var customerId = 22;\n        var result = fakeStatsService.GetRevenue(customerId);\n        Assert.AreEqual(result, 21995);\n    }\n\n    [Test]\n    public void fake_throws_exception_for_invalid_customer_id()\n    {\n        var fakeStatsService = BuildStatsService(true);\n        var customerId = 25;\n        \n        Assert.Throws( typeof(ShoutyStatsServiceException),\n              () => \n                { \n                    fakeStatsService.GetRevenue(customerId); \n                });\n    }\n   \n    private IStatsService BuildStatsService(bool useFake)\n    {\n        \n        if (!useFake)\n            {\n                return new ProductionStatsService(new ShoutyStatsService());\n            }\n\n        var initialisationData = \"19,4500;22,21995;57,300\";\n        return new FakeStatsService(initialisationData);\n\n    }\n\n\n}\n","test_case_1_expected.xml":"ï»¿<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n  <ecoStat SalespersonName=\"David Allen\" RevenuePerMile=\"0.9496676\" />\n</ecoReport>","test_case_1_input.csv":"ï»¿David Allen,130000,57","test_case_2_expected.xml":"ï»¿<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n  <ecoStat SalespersonName=\"David Allen\" RevenuePerMile=\"0.9496676\" />\n  <ecoStat SalespersonName=\"Lisa Crispin\" RevenuePerMile=\"4.572474\" />\n  <ecoStat SalespersonName=\"Ian Dees\" RevenuePerMile=\"0.006417054\" />\n</ecoReport>","test_case_2_input.csv":"ï»¿David Allen,130000,57\nLisa Crispin,27000,19\nIan Dees,19238855,22","UnitTests.cs":"ï»¿using System;\nusing System.Collections.Generic;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class UnitTests\n{\n    private FakeStatsServiceBuilder fakeStatsServiceBuilder;\n    private MileageClaimCollectionBuilder mileageClaimCollectionBuilder;\n    \n    [SetUp]\n    public void Init()\n    {\n        fakeStatsServiceBuilder = new FakeStatsServiceBuilder();\n        mileageClaimCollectionBuilder = new MileageClaimCollectionBuilder();\n        \n    }\n\n    [Test]\n    public void milage_claim_can_be_created_from_strings()\n    {\n        var claim = new MileageClaim(\"David Allen\", 37000, 99);\n        Assert.AreEqual(\"David Allen\", claim.Name);\n        Assert.AreEqual(37000, claim.Miles);\n        Assert.AreEqual(99, claim.CustomerID);\n    }\n\n    [Test]\n    public void single_sales_person()\n    {\n        var fakeStatsService = fakeStatsServiceBuilder.WithCustomerRevenue(57, 300).Build();\n        var mileageClaims = mileageClaimCollectionBuilder.WithSalesPersonMilesForCustomer(\"David Allen\", 300, 57).Build();\n\n        var shoutyReportProcessor = new ShoutyReportProcessor(mileageClaims, fakeStatsService);\n        var result = shoutyReportProcessor.Process();\n\n        Assert.AreEqual(result.Count, 1);\n        Assert.AreEqual(result[0].RevenuePerMile , 1);\n                \n    }\n}\n","zzz_DoNotReadMe.cs":"ï»¿// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Xml;\n\npublic class ShoutyStatsService\n{\n    private static Random rnd = new Random();\n\n    private int latestEcoStatsMonth;\n    private int latestEcoStatsYear;\n    private IDictionary<string, IDictionary<string, float>> ecoStatsStore\n        = new Dictionary<string, IDictionary<string, float>>();\n\n\n    private readonly Dictionary<int, decimal> revenueByCustomerId\n        = new Dictionary<int, decimal>\n        {\n            {1, 234.50m},\n            {19, 123456.78m},\n            {22, 123456.78m},\n            {57, 123456.78m}\n        };\n\n    public ShoutyStatsService()\n    {\n        if (System.Environment.GetEnvironmentVariable(\"VOLATILE_STATS_DATA\") != null)\n        {\n            revenueByCustomerId = new Dictionary<int, decimal>();\n            for (int i = 0; i < 10; i++)\n            {\n                revenueByCustomerId[rnd.Next(1, 1000)]\n                     = (decimal)rnd.Next(0, 99999999) / 100m;\n            }\n        }\n    }\n\n    public string GetRevenueForCustomer(int customerID)\n    {\n        CheckServiceConnection();\n        if (!revenueByCustomerId.ContainsKey(customerID))\n            throw new ShoutyStatsServiceException(\"No customer found with ID '\" + customerID.ToString() + \"'\");\n\n        return \"<CustomerStats id=\\\"\" +\n            customerID.ToString() +\n            \"\\\" revenue=\\\"\" +\n            revenueByCustomerId[customerID] +\n            \"\\\"/>\";\n    }\n\n    public string GetRevenueForCustomer(string customerXml)\n    {\n        CheckServiceConnection();\n        int customerID = GetCustomerId(customerXml);\n        if (!revenueByCustomerId.ContainsKey(customerID))\n            throw new ShoutyStatsServiceException(\"No customer found with ID '\" + customerID.ToString() + \"'\");\n\n        return \"<CustomerStats id=\\\"\" +\n            customerID.ToString() +\n            \"\\\" revenue=\\\"\" +\n            revenueByCustomerId[customerID] +\n            \"\\\"/>\";\n    }\n\n    public string GetCustomerIDs()\n    {\n        var result = new StringBuilder();\n        result.Append(\"<Customers>\");\n        foreach (int id in revenueByCustomerId.Keys)\n        {\n            result.Append(\"<Customer id=\\\"\");\n            result.Append(id.ToString());\n            result.Append(\"\\\"/>\");\n        }\n        result.Append(\"</Customers>\");\n\n        return result.ToString();\n    }\n\n    public string IsValidCustomer(string customerXml)\n    {\n        int id = GetCustomerId(customerXml);\n\n        if (revenueByCustomerId.ContainsKey(id))\n        {\n            return \"<booleanResponse result=\\\"TRUE\\\" />\";\n        }\n        else\n        {\n            return \"<booleanResponse result=\\\"FALSE\\\" />\";\n        }\n    }\n\n    public string GetLatestEcoStatsDate()\n    {\n        return \"<LatestEcoStatsDate year=\\\"\" +\n            latestEcoStatsYear.ToString(\"D4\") +\n            \"\\\" month=\\\"\" +\n            latestEcoStatsMonth.ToString(\"D2\") +\n            \"\\\" />\";\n    }\n\n    public void SetEcoStats(string ecoStatsXml)\n    {\n        var doc = new XmlDocument();\n        doc.LoadXml(ecoStatsXml);\n        int month = int.Parse(doc.DocumentElement.Attributes[\"month\"].Value);\n        int year = int.Parse(doc.DocumentElement.Attributes[\"year\"].Value);\n\n        string key = CreateKey(year, month);\n\n        if (year < latestEcoStatsYear ||\n                (year == latestEcoStatsYear && month < latestEcoStatsMonth))\n        {\n            throw new ShoutyStatsServiceException(\"EcoStats for a later month have already been set\");\n        }\n\n        StoreEcoStats(key, doc.DocumentElement);\n        latestEcoStatsYear = year;\n        latestEcoStatsMonth = month;\n    }\n\n    public string GetEcoStatsWinnerFor(string dateXml)\n    {\n        string winnersName = \"Nobody\";\n        float winningRevenuePerMile = 0;\n\n        var doc = new XmlDocument();\n        doc.LoadXml(dateXml);\n        int month = int.Parse(doc.DocumentElement.Attributes[\"month\"].Value);\n        int year = int.Parse(doc.DocumentElement.Attributes[\"year\"].Value);\n        string key = CreateKey(year, month);\n\n\n        foreach (var stat in ecoStatsStore[key])\n        {\n            if (stat.Value > winningRevenuePerMile)\n            {\n                winnersName = stat.Key;\n                winningRevenuePerMile = stat.Value;\n            }\n        }\n\n        return \"<ecoStatsWinner SalespersonName=\\\"\" +\n                winnersName +\n                \"\\\" />\";\n    }\n\n    private int GetCustomerId(string xml)\n    {\n        var doc = new XmlDocument();\n        doc.LoadXml(xml);\n        return int.Parse(doc.DocumentElement.Attributes[\"id\"].Value);\n    }\n\n    private string CreateKey(int year, int month)\n    {\n        return string.Format(\"{0:D4}-{1:D2}\", year, month);\n    }\n\n    private void StoreEcoStats(string key, XmlNode root)\n    {\n        if (root.HasChildNodes)\n        {\n            var ecoStats = new Dictionary<string, float>();\n\n            XmlNode ecoStatNode = root.FirstChild;\n\n            while (ecoStatNode != null)\n            {\n                ecoStats[ecoStatNode.Attributes[\"SalespersonName\"].Value] = float.Parse(ecoStatNode.Attributes[\"RevenuePerMile\"].Value);\n                ecoStatNode = ecoStatNode.NextSibling;\n            }\n\n            ecoStatsStore[key] = ecoStats;\n        }\n    }\n\n    private void CheckServiceConnection()\n    {\n        if (System.Environment.GetEnvironmentVariable(\"RELIABLE_CONNECTION\") != null)\n            return;\n\n        int parityControl = rnd.Next(1, 10);\n        if (parityControl == 1)\n            throw new ShoutyStatsServiceException(\"ShoutyStatsService connection error - please wait a few moments and try your request again\");\n    }\n}\n","output":"ProcessModel: Default    DomainUsage: Single\nExecution Runtime: mono-4.0\n.......F...\nTests run: 10, Errors: 1, Failures: 0, Inconclusive: 0, Time: 0.325446 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\nErrors and Failures:\n1) Test Error : StatsServiceContractTests.production_returns_winner_of_may\n   System.Collections.Generic.KeyNotFoundException : The given key was not present in the dictionary.\n  at System.ThrowHelper.ThrowKeyNotFoundException () [0x00000] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x00021] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at ShoutyStatsService.GetEcoStatsWinnerFor (System.String dateXml) [0x00065] in <baee9270775b49c0b1981a7c3883bfe3>:0 \n  at ProductionStatsService.GetEcoStatsWinnerFor (System.String dateXml) [0x00000] in <baee9270775b49c0b1981a7c3883bfe3>:0 \n  at StatsServiceContractTests.production_returns_winner_of_may () [0x00046] in <baee9270775b49c0b1981a7c3883bfe3>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n\n\n","test_case_3_input.csv":"ï»¿David Allen,130000,57\nLisa Crispin,27000,19\nIan Dees,0,22","test_case_3_expected.xml":"ï»¿<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n  <ecoStat SalespersonName=\"David Allen\" RevenuePerMile=\"0.9496676\" />\n  <ecoStat SalespersonName=\"Lisa Crispin\" RevenuePerMile=\"4.572474\" />\n  <ecoStat SalespersonName=\"Ian Dees\" RevenuePerMile=\"0\" />\n</ecoReport>","test_case_4_input.csv":"ï»¿David Allen,130000,57\nDavid Allen,2000,19","test_case_4_expected.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n  <ecoStat SalespersonName=\"David Allen\" RevenuePerMile=\"1.870557\" />\n</ecoReport>"}